var searchIndex = {};
searchIndex["owning_ref"] = {"doc":"# An owning reference.","items":[[3,"OwningRef","owning_ref","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows\nconsumers to pass around an owned object and a dependent reference,\n`OwningHandle` contains an owned object and a dependent _object_.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"StableAddress","","Marker trait for expressing that the memory address of the value\nreachable via a dereference remains identical even if `self` gets moved.",null,null],[8,"CloneStableAddress","","Marker trait for expressing that the memory address of the value\nreachable via a dereference remains identical even if `self` is a clone.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to.\nThis is used in form of a trait object for keeping\nsomething around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to,\nfor example `Box&lt;T&gt; -&gt; Box&lt;Erased&gt;`. This would be unneeded with\nhigher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a\nhandle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a\nmutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner\ninitialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.\nInstead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable\nfrom the previous one.",3,null],[11,"try_map","","Tries to convert `self` into a new owning reference that points\nat something reachable from the previous one.",3,null],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,null],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped\nin an additional `Box&lt;O&gt;`.",3,null],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,null],[11,"owner","","A getter for the underlying owner.",3,null],[11,"into_inner","","Discards the reference and retrieves the owner.",3,null],[11,"new","","Creates a new owning reference from a owner\ninitialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.\nInstead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new _shared_ owning reference that points at\nsomething reachable from the previous one.",4,null],[11,"map_mut","","Converts `self` into a new _mutable_ owning reference that points at\nsomething reachable from the previous one.",4,null],[11,"try_map","","Tries to convert `self` into a new _shared_ owning reference that points\nat something reachable from the previous one.",4,null],[11,"try_map_mut","","Tries to convert `self` into a new _mutable_ owning reference that points\nat something reachable from the previous one.",4,null],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,null],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped\nin an additional `Box&lt;O&gt;`.",4,null],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,null],[11,"owner","","A getter for the underlying owner.",4,null],[11,"into_inner","","Discards the reference and retrieves the owner.",4,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types\nthat don&#39;t implement `ToHandle`, callers may invoke `new_with_fn`, which accepts\na callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with\na pointer to the object owned by `o`, and the returned value is stored\nas the object to which this `OwningHandle` will forward `Deref` and\n`DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with\na pointer to the object owned by `o`, and the returned value is stored\nas the object to which this `OwningHandle` will forward `Deref` and\n`DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",3,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",3,null],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"clone","","",3,null],[11,"fmt","","",6,null],[11,"eq","","",3,null],[11,"partial_cmp","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"eq","","",4,null],[11,"partial_cmp","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
initSearch(searchIndex);
